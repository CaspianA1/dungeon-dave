A lot of changes. Here they are:
	1. Introduce a material system. Per-object-instance parameters are defined, as well as parameters per object type. Also define lighting params per level in a struct. No more lighting data kept in 'constants'! A PBR lighting system goes hand-in-hand with the material system now too.

	2. Finish most of ambient occlusion (essentially done for now). It was a multi-month struggle, but now I have something that works pretty well (it's slow though, I'll have to scale it up for the GPU eventually). Also implement tricubic filtering for the ambient occlusion map (which was a bit tricky since it was in 3 dimensions). 

	3. A lot of refactoring, reformatting, variable name changes, etc. One major one is renaming diffuse samplers or textures to be albedo samplers or textures.
	4. For the billboard depth shader, rescaling the alpha threshold depending on the texture LOD, in order to stop those shadows from disappearing.
	5. Remove the old desecrator.bmp file, and rename desecrator_cropped.bmp to just desecrator.bmp.
	6. Make a typedef for texture ids, called 'texture_id_t' (will rename it to 'texture_index_t' eventually).
	7. Most object params now described through some struct type with a 'Config' suffix. Later on, will validate those 'Config' structs when I get on-disk level input.
	8. For the camera, make acceleration framerate-independent.
	9. Remove the runtime constant system.
	10. Split up map defs and utils into 2 separate files, 'maps.c/.h' and 'map_utils.h'.
	11. Clean up a bunch of #includes, to stop including stuff that I don't need. Also document what each #include is for.
	12. Now using quaternions for the dtnamic light, for marginally better rotations.
	13. In typedefs.h, clean up the typedefs, remove some stuff from it + split it up into smaller headers, and make some typedefs more specific.
	14. For `LIST_FOR_EACH`, removed the of out bounds name param.
	15. Add support for 1D textures.
	16. Move a lot of camera debugging calls to the main event loop.
	17. In 'uniform_buffer.c', when initializing an array, check for an exact size match.
	18. In the sector culling code, implement an optimization where if the camera is facing in the negative Z direction, the sectors are ordered in the other direction in memory to reduce overdraw. This actually helps rendering speed quite a bit in a lot of situations!
	19. In the normal map generation code, speed things up some by making a heightmap first, and then using that throughout for the Gaussian blur and such, for the sake of speeding things up.
	20. Separate out window creation and utils.
