///// The old UV creation function:

GLfloat* create_uv_for_plane(const int width, const int height) {
	const GLfloat uv[plane_uv_floats] = {
		0.0f, 0.0f,
		width, 0.0f,
		0.0f, height,

		0.0f, height,
		width, height,
		width, 0.0f
	};

	GLfloat* const uv_data = malloc(plane_uv_bytes);
	memcpy(uv_data, uv, plane_uv_bytes);
	return uv_data;
}

/////

const size_t plane_uv_bytes = plane_uv_floats * sizeof(GLfloat);
enum {plane_vertex_floats = 18, plane_uv_floats = 12};

/////

	GLfloat plane_sizes[6] = {
		size_hori_2, size_vert_2, size_hori, size_vert, size_hori, size_vert

		/*
		size_hori, size_vert, size_hori, size_vert, size_hori, size_vert,

		size_hori, size_vert, size_hori, size_vert, size_hori, size_vert,
		size_hori, size_vert, size_hori, size_vert, size_hori, size_vert,

		size_hori, size_vert, size_hori, size_vert, size_hori, size_vert,
		size_hori, size_vert, size_hori, size_vert, size_hori, size_vert,

		size_hori, size_vert, size_hori, size_vert, size_hori, size_vert,
		size_hori, size_vert, size_hori, size_vert, size_hori, size_vert
		*/
	};

///// Old IBO code:

void deinit_demo_vars(const StateGL sgl) {
	glDeleteProgram(sgl.shader_program);

	glDeleteBuffers(sgl.num_vertex_buffers, sgl.vertex_buffers);
	free(sgl.vertex_buffers);

	if (sgl.num_textures > 0) {
		glDeleteTextures(sgl.num_textures, sgl.textures);
		free(sgl.textures);
	}

	glDeleteBuffers(1, &sgl.index_buffer);
	glDeleteVertexArrays(1, &sgl.vertex_array);
}

const GLuint demo_3_index_data[] = {
	0, 1, 2,
	3, 0, 4,
	5, 0, 6,
	3, 6, 0,
	0, 2, 4,
	5, 1, 0,
	2, 1, 5,
	7, 6, 3,
	6, 7, 5,
	7, 3, 4,
	7, 4, 2,
	7, 2, 5
};

