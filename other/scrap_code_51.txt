/*
print_navigator(nav -> route, *nav -> pos);
DEBUG_VEC((*nav -> pos));
DEBUG_VEC(player_pos);
printf("---\n");
*/

/////

/*
const Weapon first_weapon = init_weapon("../assets/audio/sound_effects/whip_crack.wav",
	"../assets/spritesheets/weapons/whip.bmp", 4.5, 0.4, 4, 6, 22, 60);
*/

/*
const Weapon first_weapon = init_weapon("../assets/audio/sound_effects/shotgun.wav",
	"../assets/spritesheets/weapons/snazzy_shotgun.bmp", 4.0, 0.7, 6, 10, 59, 30);
*/

/*
const Weapon first_weapon = init_weapon("../assets/audio/enemy_sound_test/attack.wav",
	"../assets/spritesheets/weapons/golden_dagger.bmp", 4.0, 0.2, 2, 5, 9, 30);
*/

/////

/*
inlinable Weapon init_weapon(const char* const sound_path, const char* const spritesheet_path,
	const double power, const double dist_for_hit, const int frames_per_row,
	const int frames_per_col, const int frame_count, const int fps) {

	#ifndef SOUND_ENABLED
	(void) sound_path;
	#endif

	return (Weapon) {
		0, power, dist_for_hit, init_sound(sound_path, 1),
		init_animation(spritesheet_path, frames_per_row, frames_per_col, frame_count, fps)
	};
}
*/

/////

inlinable Weapon init_weapon(const char* const, const char* const,
	const double, const double, const int, const int, const int, const int);

/////

// frame_num == -1 -> auto_progress frame

/////

DEBUG(d2 - actual_dist, lf);
DEBUG(d3 - d2, lf);
printf("---\n");

/////

const double actual_dist = straight_dist / (double) buffer_val.cos_beta;

const double d2 = straight_dist / (double) val_buffer[screen_x + 1].cos_beta;
const double d3 = straight_dist / (double) val_buffer[screen_x + 2].cos_beta;

/////

/*
const vec test = {2.5, 3.5}, other = {0.2, 0.3};
const vec foo = _mm_floor_sd(test, other);
DEBUG_VEC(foo);
*/

const vec value = {3.2, 4.4};
__m128d integer = _mm_round_pd(value,_MM_FROUND_TRUNC);
__m128d fraction = _mm_sub_pd(value,integer);
DEBUG_VEC(fraction);

///// so cool!

inlinable vec vec_tex_offset(const vec pos, const int max_offset) {
	return vec_fill(max_offset) * (pos - _mm_round_pd(pos, _MM_FROUND_TRUNC));
}

/////

/*
const vec offset = vec_tex_offset(hit, p.size - 1);
Uint32 src = *(read_texture_row(p.pixels, p.pitch, offset[1]) + (int) offset[0]);
*/

/////

double actual_dist_step = d6 - d5;
const double actual_dist_step_step = actual_dist_step - (d5 - d4);
DEBUG(actual_dist_step_step, lf);

double actual_dist = d1;

DEBUG(d6 - d5, lf);
DEBUG(d5 - d4, lf);
DEBUG(d4 - d3, lf);
DEBUG(d3 - d2, lf);
DEBUG(d2 - d1, lf);
printf("---\n");

for (int screen_x = 0; screen_x < settings.screen_width;
	screen_x++, actual_dist += actual_dist_step, actual_dist_step += actual_dist_step_step) {

/////

const double d1 = straight_dist / (double) val_buffer[0].cos_beta;
const double d2 = straight_dist / (double) val_buffer[1].cos_beta;
const double d3 = straight_dist / (double) val_buffer[2].cos_beta;
const double d4 = straight_dist / (double) val_buffer[3].cos_beta;
const double d5 = straight_dist / (double) val_buffer[4].cos_beta;
const double d6 = straight_dist / (double) val_buffer[5].cos_beta;

/////

// #include <immintrin.h>
// #include <xmmintrin.h>
#include <x86intrin.h>

/////

_mm256_frcz_pd;
_mm256_frcz_ps;

/////

/*
const int max_offset = p.size - 1;
const ivec floored_hit = ivec_from_vec(hit);
const ivec offset = {
	(hit[0] - floored_hit.x) * max_offset,
	(hit[1] - floored_hit.y) * max_offset
};
*/

/////

ivec ivec_tex_offset(const vec pos, const int tex_size) {
	const int max_offset = tex_size - 1;
	const ivec floored_hit = ivec_from_vec(pos);
	return (ivec) {
		(pos[0] - floored_hit.x) * max_offset,
		(pos[1] - floored_hit.y) * max_offset
	};
}

/////

/*
const vec offset = vec_tex_offset(hit, p.size);	// 10306
Uint32 src = *(read_texture_row(p.pixels, p.pitch, offset[1]) + (long) offset[0]);
*/


/*
Uint32 src;

if (keys[SDL_SCANCODE_R]) {
	const ivec offset = ivec_tex_offset(hit, p.size);
	src = *(read_texture_row(p.pixels, p.pitch, offset.y) + offset.x);
}
else {
	const vec offset = vec_tex_offset(hit, p.size);	
	src = *(read_texture_row(p.pixels, p.pitch, offset[1]) + (long) offset[0] + 1);
}
*/

/////

/* const shade factor:
_shade_ARGB_pixel:                      ## @shade_ARGB_pixel
	.cfi_startproc
## %bb.0:
	push	rbp
	.cfi_def_cfa_offset 16
	.cfi_offset rbp, -16
	mov	rbp, rsp
	.cfi_def_cfa_register rbp
	mov	eax, edi
	mov	ecx, edi
	shr	ecx, 16
	movzx	ecx, cl
	vcvtsi2sd	xmm0, xmm0, ecx
	movzx	ecx, ah
	vmovsd	xmm1, qword ptr [rip + LCPI54_0] ## xmm1 = mem[0],zero
	vmulsd	xmm0, xmm0, xmm1
	vcvttsd2si	edx, xmm0
	movzx	eax, al
	vcvtsi2sd	xmm0, xmm2, ecx
	vmulsd	xmm0, xmm0, xmm1
	vcvttsd2si	ecx, xmm0
	vcvtsi2sd	xmm0, xmm2, eax
	vmulsd	xmm0, xmm0, xmm1
	vcvttsd2si	eax, xmm0
	shl	edx, 16
	movzx	ecx, cl
	shl	ecx, 8
	movzx	eax, al
	or	eax, ecx
	or	eax, edx
	or	eax, -16777216
	pop	rbp
	ret

non-const shade factor:
_shade_ARGB_pixel:                      ## @shade_ARGB_pixel
	.cfi_startproc
## %bb.0:
	push	rbp
	.cfi_def_cfa_offset 16
	.cfi_offset rbp, -16
	mov	rbp, rsp
	.cfi_def_cfa_register rbp
	push	rbx
	sub	rsp, 24
	.cfi_offset rbx, -24
	vmovsd	qword ptr [rbp - 32], xmm0      ## 8-byte Spill
	mov	ebx, edi
	mov	rax, qword ptr [rip + _settings@GOTPCREL]
	vmovsd	xmm0, qword ptr [rax + 56]      ## xmm0 = mem[0],zero
	vmovsd	qword ptr [rbp - 24], xmm0      ## 8-byte Spill
	vcvtsi2sd	xmm0, xmm2, dword ptr [rax + 4]
	vmovsd	qword ptr [rbp - 16], xmm0      ## 8-byte Spill
	mov	rax, qword ptr [rip + _current_level@GOTPCREL]
	vmovapd	xmm0, xmm1
	call	qword ptr [rax + 112]
	vmulsd	xmm0, xmm0, qword ptr [rbp - 24] ## 8-byte Folded Reload
	vmovsd	xmm1, qword ptr [rbp - 16]      ## 8-byte Reload
                                        ## xmm1 = mem[0],zero
	vmulsd	xmm1, xmm1, qword ptr [rbp - 32] ## 8-byte Folded Reload
	vdivsd	xmm0, xmm0, xmm1
	vminsd	xmm0, xmm0, qword ptr [rip + LCPI54_0]
	mov	eax, ebx
	shr	eax, 16
	movzx	eax, al
	vcvtsi2sd	xmm1, xmm2, eax
	vmulsd	xmm1, xmm0, xmm1
	vcvttsd2si	ecx, xmm1
	movzx	eax, bh
	vcvtsi2sd	xmm1, xmm2, eax
	vmulsd	xmm1, xmm0, xmm1
	vcvttsd2si	eax, xmm1
	movzx	edx, bl
	vcvtsi2sd	xmm1, xmm2, edx
	vmulsd	xmm0, xmm0, xmm1
	vcvttsd2si	edx, xmm0
	shl	ecx, 16
	movzx	esi, al
	shl	esi, 8
	movzx	eax, dl
	or	eax, esi
	or	eax, ecx
	or	eax, -16777216
	add	rsp, 24
	pop	rbx
	pop	rbp
	ret
*/

/////