/*
print_navigator(nav -> route, *nav -> pos);
DEBUG_VEC((*nav -> pos));
DEBUG_VEC(player_pos);
printf("---\n");
*/

/////

/*
const Weapon first_weapon = init_weapon("../assets/audio/sound_effects/whip_crack.wav",
	"../assets/spritesheets/weapons/whip.bmp", 4.5, 0.4, 4, 6, 22, 60);
*/

/*
const Weapon first_weapon = init_weapon("../assets/audio/sound_effects/shotgun.wav",
	"../assets/spritesheets/weapons/snazzy_shotgun.bmp", 4.0, 0.7, 6, 10, 59, 30);
*/

/*
const Weapon first_weapon = init_weapon("../assets/audio/enemy_sound_test/attack.wav",
	"../assets/spritesheets/weapons/golden_dagger.bmp", 4.0, 0.2, 2, 5, 9, 30);
*/

/////

/*
inlinable Weapon init_weapon(const char* const sound_path, const char* const spritesheet_path,
	const double power, const double dist_for_hit, const int frames_per_row,
	const int frames_per_col, const int frame_count, const int fps) {

	#ifndef SOUND_ENABLED
	(void) sound_path;
	#endif

	return (Weapon) {
		0, power, dist_for_hit, init_sound(sound_path, 1),
		init_animation(spritesheet_path, frames_per_row, frames_per_col, frame_count, fps)
	};
}
*/

/////

inlinable Weapon init_weapon(const char* const, const char* const,
	const double, const double, const int, const int, const int, const int);

/////

// frame_num == -1 -> auto_progress frame

/////

DEBUG(d2 - actual_dist, lf);
DEBUG(d3 - d2, lf);
printf("---\n");

/////

const double actual_dist = straight_dist / (double) buffer_val.cos_beta;

const double d2 = straight_dist / (double) val_buffer[screen_x + 1].cos_beta;
const double d3 = straight_dist / (double) val_buffer[screen_x + 2].cos_beta;

/////

/*
const vec test = {2.5, 3.5}, other = {0.2, 0.3};
const vec foo = _mm_floor_sd(test, other);
DEBUG_VEC(foo);
*/

const vec value = {3.2, 4.4};
__m128d integer = _mm_round_pd(value,_MM_FROUND_TRUNC);
__m128d fraction = _mm_sub_pd(value,integer);
DEBUG_VEC(fraction);

///// so cool!

inlinable vec vec_tex_offset(const vec pos, const int max_offset) {
	return vec_fill(max_offset) * (pos - _mm_round_pd(pos, _MM_FROUND_TRUNC));
}

/////

/*
const vec offset = vec_tex_offset(hit, p.size - 1);
Uint32 src = *(read_texture_row(p.pixels, p.pitch, offset[1]) + (int) offset[0]);
*/

/////

double actual_dist_step = d6 - d5;
const double actual_dist_step_step = actual_dist_step - (d5 - d4);
DEBUG(actual_dist_step_step, lf);

double actual_dist = d1;

DEBUG(d6 - d5, lf);
DEBUG(d5 - d4, lf);
DEBUG(d4 - d3, lf);
DEBUG(d3 - d2, lf);
DEBUG(d2 - d1, lf);
printf("---\n");

for (int screen_x = 0; screen_x < settings.screen_width;
	screen_x++, actual_dist += actual_dist_step, actual_dist_step += actual_dist_step_step) {

/////

const double d1 = straight_dist / (double) val_buffer[0].cos_beta;
const double d2 = straight_dist / (double) val_buffer[1].cos_beta;
const double d3 = straight_dist / (double) val_buffer[2].cos_beta;
const double d4 = straight_dist / (double) val_buffer[3].cos_beta;
const double d5 = straight_dist / (double) val_buffer[4].cos_beta;
const double d6 = straight_dist / (double) val_buffer[5].cos_beta;

/////