features:
	- 'sectors' for wall height sections
	- doors
	- a settings option in the title screen and status bar
	- move mouse out of window if pressing escape
	- a level opener, with a cool spinning effect
	- a sprite pool
	- an airship + maze level
	- collide with billboards
	- accelerate sideways
	- a gui system
	- a file format
	- a map editor
	- linearly interpolate actual_dist for more speed
	- floors at different height levels
	- smooth mipmap depth switching, and mipmap a texture until its width or height reaches 1
	- mipmapping for things
	- a shotgun more in the art style of Adam's whip
	- Attacked state for enemy
	- a metro level
	- draw sprite sections in chunks
	- a sol enemy
	- figure out lcov (?)
	- make each file an .o file, and then link them all together
	- faster enemy movement when nearer player (a logarithmic scale)
	- only one sound effect at once - otherwise, out of channels (?)
	- long-range attacking enemies via guns
	- slow enemies down by hitting them - or stop them in some way
	- make the minimap full-screen, meaning that it's rendered separately from the health percentage
	- an app: https://gist.github.com/mathiasbynens/674099
problems:
	- slowing down -> a keypress, resets speed
	- player clipping into corners
	- small screen -> bigger screen or very small screen, edge triangles
	- z-buffering issues with sprites for higher point heights
	- min and max projection distance
	- FOV effect increases more higher up (maybe change the max FOV for different height limits?)
	- don't intersect the player dot with walls in the minimap
	- shading is slow (it's all down to one line, the calculate_shade line)
	- skyboxes become wonky when the screen size changes too much (readjust mouse pos after scaling down the screen - b/c that is messing with the skybox)
	- disabling vsync makes everything choppy (not a big problem, just curious why)
	- vecs to float[2]'s in screen.dir_buffer
	- fix the offset problem for fast_affine_floor
	- sometimes, psprites disappear mid-game (use memory sanitizer to resolve the problem: https://github.com/google/sanitizers/wiki/MemorySanitizer)
	- bogo is completely light with -Ofast when he shouldn't be
	- many memory leaks
	- little blinking dots in the distance for the hieroglyphics bitmap
	- horizontal wall stitches at a distance + vertical gray lines due to the box blur at a distance (reproduce by standing at the demon in level 1, and looking at the pyramid texture without shading enabled)
	- enemies have jerky movement sometimes that can make them temporarily clip into a wall (reproduce it by jumping around, wait till the enemy moves at a slant, and then go to their position)
	- pass sounds by reference
	- make the 0.33 ground level not a constant in effects.c

completed:
	- minimap that conveys height data
	- crosshair that stays aligned to the horizon
	- health percent indicator
	- enemy AI with idle, chasing, attacking, and dead states, with BFS pathfinding; enemies have different sounds and animations depending on their state as well that get quieter when farther away; can wake up enemies by getting too close, or making a sound through using a weapon, jumping, or landing from a large height
	- weapons use DDA to detect collisions; option to allow weapon to have close and far range as well
	- rudimentary level creation interface
	- shading of diffuse circles and flat triangles, as well as environments that get darker when farther away
	- static and animated billboards (with only 1D Z-buffering for now)
	- texture mapping, with mipmapping that incorporates box blur (for cache coherency)
	- audio system that allows for sound effects, background music, and volume tweaking based on a sound-emitter's distance from the player
	- skyboxes that also change the portion shown based on the y-pitch
	- raycasting with multiple floor heights (no multi-dimensional floors though, yet)
	- use of vector intrinsics and an optimized bitmatrix data structure to ease performance on older devices
	- free look, with y-shearing and turning controlled by the mouse
	- accurate movement physics, both in terms of 2D acceleration + deceleration, and Y-axis jumping
	- increase in FOV while accelerating, screen tilt when strafing, and additional y-shearing when moving, giving a 'pacing' effect
	- remappable keybindings for movement
	- memory leak tracking system
	- planar + noclip mode