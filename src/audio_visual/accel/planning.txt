Some TODOs for a recent next time:
- NEXT: final touches on new_map + a texmap for it
- NEXT 2: a sector BVH, through metasector trees, also called binary r-trees (alloc through node pool)
- NEXT 3: entities that don't turn to face the player (just static ones); defined by center, size, and normal
- NEXT 4: up-and-down moving platforms that can also work as doors (continually up-and-down moving, down if player close, or down if action fulfilled)
- NEXT 6: deprecate most of StateGL's members and rely solely on vertex_array and any_data
- NEXT 7: a castle level that's crazy high in the sky, where you can look down really far; and a mountain level, like Mount Fuji

Final lighting model:
- Ambient overall light, diffuse, specular - done
- No perlin map - done
- A shadow map also based on that light source - done
- Not-too-strong, penumbra-heavy shadows
	(just for sectors, and only recompute for dynamic sectors when they're in view or moving)
- Ambient occlusion through an occlusion map
- One global light source, like a sun (that involves everything above)
- For a sun bounding box, imagine a rotated OBB encompassing an AABB that represents the world (make a demo out of that):
	- First, make an encompassing OBB around a 2D AABB box
	- The box doesn't need to encompass the AABB at first, it just needs to be rotated
	- It can then be resized to the AABB area after
	- Then, expand that to 3D

Other random ideas:
- A map maker. An init json file that specifies textures and dimensions;
	draw/erase modes, line mode, export, and choose heights and textures
- More efficiently set statemap bit ranges, maybe
- Camera var names to yaw, pitch, and roll (maybe)
- Billboard lighting that matches the sector lighting (share uniforms via a uniform buffer object)
- Can't use red cross for health since it's copyrighted
- Premultiplied billboard alphas: http://www.realtimerendering.com/blog/gpus-prefer-premultiplication/ (or perhaps not, since alpha just 0 or 1)
- For some reason, mouse usage gives choppy look movement (with the Mac)
- Can store one more byte in a sector with it staying 16 bytes - maybe do something more with that?
- Sliding across the floor (with the head tilted up)
- Catch more warnings with -Weverything
- Macros for common initialization and deinitalization of OpenGL objects (like gl_init, gl_use, and gl_deinit)
- File paths may not work on Windows
- Some steeply angled shadows exhibit aliasing
- Pass in texture parameters through a bitmask
- Compile modules separarely, and then link them all together with a given demo
- Manage shadow map resolution better for bigger scenes

Normal mapping:
- Normal map details disappear at steep angles and lower mip levels
- Improper EVSM light coverage leads to some in-shadow areas having bumps on them
- Unshadowed areas have no bumps (or is that okay?)
- Some aliasing
- Generating normal maps is slow
- After the gaussian blur, generate a texture set of normal maps that are paired with the face normal maps
- Pack those normal maps in the same texture set as the face texture set (after them, but perhaps interleaved later)
- Perhaps store the normal maps with only the x and y gradients, and put the intensity as a fragment shader input later (then, 16 bytes instead of 32)

A better shading model:
- Macros for generation of objects, like GL_INIT(Buffer) for example
- Share code between shaders
- Read in shaders from files
- Share shader uniforms via uniform buffer objects

Physics:
- Crouch
- Make deceleration and tilt decrease framerate-independent
- Animations go slower at 5 FPS
- Having an idle window with vsync on leads to high CPU and GPU usage
- Make tilting not depend on framerate (mouse deltas will always be smaller with a higher FPS)
- The checker heightmap has faster pacing sometimes
- Pressing left + forward and backward doesn't stop moving on the X axis
- A half-stutter when pressing towards a wall and then letting go of a movement key
- Can get a tiny bit stuck in a wall when jumping downwards close to a wall (so will have to be able to stand a tiny bit off the wall)

Chromebook bugs:
- Memory leak with debug mode at the end of demos 17 and 22 (rest probably too), the lightmapper, the map editor, and the collision demo
- Other demos untested
- Outer project does not even want to start
- Demo test range doesn't work
- Sometimes, mouse control does not work when using the keyboard
- Framerate drop when using the big monitor + optimized + full screen
- Weird fragmented (like broken glass?) shadows behind the light source

Weapon sprite:
- Put weapon shaders in shaders.c
- Configure mag and min filter as a variable
- Rescale the weapon to make it not warped by the screen resolution

General future components:
- Blit 2D sprite to whole screen
- Flat weapon
- Use more of the cglm functions in `update_camera`, or make my own
- A startup setting of magnification filter (and setting other constants like that as well, like the refresh rate; call that `runtime_constants`)

- In the end, 5 shaders + accel components: sectors, billboards, skybox, weapon, ui elements
